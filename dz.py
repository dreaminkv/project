#  Написать функцию num_translate(), переводящую числительные от 0 до 10 c
# английского на русский язык. Например:
#  >>> num_translate("one")
#  "один"
#  >>> num_translate("eight")
#  "восемь"
#  Если перевод сделать невозможно, вернуть None. Подумайте, как и где
# лучше хранить информацию, необходимую для перевода: какой тип данных выбрать,
# в теле функции или снаружи.

# def num_translate(number):
#     numbers = {'zero': 'ноль', 'one': 'один', 'two': 'два', 'three': 'три', 'four': 'четыре',
#                'five': 'пять', 'six': 'шесть', 'seven': 'семь', 'eight': 'восемь', 'nine': 'девять',
#                'ten': 'десять'}
#     if number in numbers:
#         print(numbers[number])
#     else:
#         return None
#
#
#
#
# num_translate('zero')


def num_translate(number):
    numbers = {'zero': 'ноль', 'one': 'один', 'two': 'два', 'three': 'три', 'four': 'четыре',
               'five': 'пять', 'six': 'шесть', 'seven': 'семь', 'eight': 'восемь', 'nine': 'девять',
               'ten': 'десять', 'Zero': 'Ноль', 'One': 'Один', 'Two': 'Два', 'Three': 'Три',
               'Four': 'Четыре', 'Five': 'Пять', 'Six': 'Шесть', 'Seven': 'Семь', 'Eight': 'Восемь',
               'Nine': 'Девять', 'Ten': 'Десять'}
    if number in numbers:
        print(numbers[number])
    else:
        return None


num_translate('Ten')

#####################################################################################################################################

# Написать функцию thesaurus(), принимающую в качестве аргументов имена сотрудников и возвращающую словарь,
# в котором ключи — первые буквы имён, а значения — списки,
# содержащие имена, начинающиеся с соответствующей буквы. Например:
# >>> thesaurus("Иван", "Мария", "Петр", "Илья")
# {
#     "И": [],
#     "М": [], "П": []
# }
# Подумайте: полезен ли будет вам оператор распаковки? Как поступить, если потребуется сортировка по ключам? Можно ли использовать словарь в этом случае?


def works_lis(*args):
    works_dict = {}
    works_dict_sort = []
    for i in sorted(args):
        alphabetic = i[0]
        if alphabetic in works_dict:
            works_dict[alphabetic].append(i)
        else:
            works_dict[alphabetic] = [i]

    print(works_dict)

works_lis('Иван', 'Ирина', 'Инга', 'Вадим', 'Николай', 'Евгений', 'Елена', 'Анатолий', 'Валерий')

#####################################################################################################################################
# Реализовать функцию get_jokes(), возвращающую n шуток, сформированных
# из трех случайных слов, взятых из трёх списков (по одному из каждого):

#
#         	Например:
# >>> get_jokes(2)
# ["лес завтра зеленый", "город вчера веселый"]
#
#
# Документировать код функции.
# Сможете ли вы добавить еще один аргумент — флаг, разрешающий или запрещающий
# повторы слов в шутках (когда каждое слово можно использовать только в одной шутке)?
# Сможете ли вы сделать аргументы именованными?
# Задачи со * предназначены для продвинутых учеников, которым мало сделать обычное задание
import random


def get_jokes(number_of_jokes=0, nuko=False):
    nouns = ["автомобиль", "лес", "огонь", "город", "дом"]
    adverbs = ["сегодня", "вчера", "завтра", "позавчера", "ночью"]
    adjectives = ["веселый", "яркий", "зеленый", "утопичный", "мягкий"]

    ready_made_jokes = []
    for i in range(0, number_of_jokes):
        collect_jokes = random.choice(nouns), random.choice(adverbs), random.choice(adjectives)
        if nuko:
            nouns.remove(collect_jokes[0])
            adverbs.remove(collect_jokes[1])
            adjectives.remove(collect_jokes[2])
        ready_made_jokes.append((' '.join(collect_jokes)))
    print(ready_made_jokes)


get_jokes(5, False)
